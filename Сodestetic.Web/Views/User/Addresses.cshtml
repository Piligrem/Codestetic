@model UserAddressListModel
@using Specter.Web.Models.User;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
}
@section left
{
    @Html.Partial("AccountNavigation", Model.NavigationModel, new ViewDataDictionary())
}
<div class="page-title">@T("Account.UserAddresses")</div>
<div class="page account-page address-list-page">
    <div class="page-body">
        <div class="add-button">
            <a class="btn btn-primary button-face add-address-button" style="margin-bottom:10px" href="@Url.RouteUrl("UserAddressAdd")">
                <i class="icon-plus"></i>@T("Common.AddNew")
            </a>
        </div>
        <div class="address-list">
            @if (Model.Addresses.Count > 0)
            {
                for (int i = 0; i < Model.Addresses.Count; i++)
                {
                    var address = Model.Addresses[i];
                    <div class="address-item clearfix">
                        <h4 class="title">@address.FirstName @address.LastName</h4>
                        <div class="info form-horizontal pull-left">
                            <div class="email">@Html.LabelFor(model => model.Addresses[i].Email): @address.Email</div>
                            @if (address.PhoneEnabled)
                            {
                                <div class="phone">@Html.LabelFor(model => model.Addresses[i].PhoneNumber): @address.PhoneNumber</div>
                            }
                            @if (address.FaxEnabled)
                            {
                                <div class="fax">@Html.LabelFor(model => model.Addresses[i].FaxNumber): @address.FaxNumber</div>
                            }
                            @if (address.CompanyEnabled && !String.IsNullOrEmpty(address.Company))
                            {
                                <div class="company">@address.Company</div>
                            }
                            @if (address.StreetAddressEnabled)
                            {
                                <div class="address1">@address.Address1</div>
                            }
                            @if (address.StreetAddress2Enabled && !String.IsNullOrEmpty(address.Address2))
                            {
                                <div class="address2">@address.Address2</div>
                            }
                            @if (address.CountryEnabled && !String.IsNullOrEmpty(address.CountryName))
                            {
                                <div class="country">@address.CountryName</div>
                            }
                        </div>
                        <div class="buttons pull-right">
                            <button class="btn button-face edit-address-button" onclick="location.href='@Url.RouteUrl("UserAddressEdit", new { addressId = address.Id })'">
                            @*<button class="btn button-face edit-address-button" onclick="location.href='@Url.Action("AddressEdit", "User", new { addressId = address.Id })'">*@
                                    <i class="icon icon-edit"></i>@T("Common.Edit")
                                </button>
                            <button class="btn btn-danger button-face delete-address-button" onclick="location.href='@Url.RouteUrl("UserAddressDelete", new { addressId = address.Id })'">
                                <i class="icon icon-trash"></i>@T("Common.Delete")
                            </button>
                        </div>
                    </div>
                    <div class="clear"></div>
                }
            }
            else
            {
                @T("Account.UserAddresses.NoAddresses")
            }
        </div>
    </div>
</div>

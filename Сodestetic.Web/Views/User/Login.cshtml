@model LoginModel
@using Specter.Web.Models.User;
@using Specter.Web.Core;
@using Specter.Web.Core.Infrastructure;
@using Specter.Web.Core.Infrastructure.DependencyManagement;

@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Login").Text);

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register");
    if (!String.IsNullOrEmpty(this.Context.Request.QueryString["returnUrl"]))
    {
        var webHelper = EngineContext.Current.Resolve<IWebHelper>();
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl=" + HttpUtility.UrlEncode(this.Context.Request.QueryString["returnUrl"]), null);
    }
}

<div class="page-title">@T("Account.Login.Welcome")</div>
<div class="page login-page">
    @Html.Action("TopicBlock", "Topic", new { systemName = "LoginRegistrationInfo" })
    @Html.Partial("_ExternalAuthentication.AssociateMessage")
    @Html.Partial("_ExternalAuthentication.Errors")
    <div class="page-body">
        <div class="page-two-col page-border">
            @if (Model.CheckoutAsGuest)
            {
                <div class="login-block login-block-register">
                    <div class="block block-inner checkout-as-guest-or-register-block">
                        <div class="block-title">
                            @T("Account.Login.CheckoutAsGuestOrRegister")
                        </div>
                        <div class="block-body">
                            <p>@Html.Action("TopicBlock", "Topic", new { systemName = "CheckoutAsGuestOrRegister" })</p>
                            <div class="buttons">
                                <a class="btn pull-left checkout-as-guest-button" href="@Url.RouteUrl("Checkout")">
                                    @T("Account.Login.CheckoutAsGuest")
                                </a>
                                <a class="btn btn-primary pull-right register-button" href="@registerUrl">
                                    @T("Account.Register")
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="login-block login-block-register" style="width:50%;">
                    <div class=" block block-inner">
                        <div class="block-title">@T("Account.Login.NewUser")</div>
                        <div class="block-body">@T("Account.Login.NewUserText")</div>
                        <div class="buttons"><a class="btn btn-primary button-face register-button" href="@registerUrl">@T("Account.Register")</a></div>
                    </div>
                </div>
            }
            <div class="login-block login-block-login" style="width:50%;">
                <div class="block block-inner">
                    <div class="block-title">@T("Account.Login.ReturningUser")</div>
                    <div class="block-body">
                        <form action="@ViewContext.HttpContext.Request.RawUrl" method="post" class="form-horizontal">
                            @if (!ViewData.ModelState.IsValid)
                            {
                                @Html.ValidationSummary(true, T("Account.Login.Unsuccessful").Text)
                            }
                            <table class="user-login" cellpadding="5">
                                @if (Model.UsernamesEnabled)
                                {
                                    <tr>
                                        <td>
                                            @Html.LabelFor(model => model.Username, new { @class = "control-label", @for = "Username" })
                                        </td>
                                        <td>
                                            <div class="input-prepend">
                                                <span class="add-on"><i class="icon-user"></i></span>
                                                @Html.TextBoxFor(m => m.Username, new { @class = "username" })
                                            </div>
                                            @Html.ValidationMessageFor(m => m.Username)
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td>
                                            @Html.LabelFor(model => model.Email, new { @class = "control-label", @for = "Email" })
                                        </td>
                                        <td>
                                            <div class="input-prepend">
                                                <span class="add-on"><i class="icon-envelope"></i></span>
                                                @Html.TextBoxFor(m => m.Email, new { @class = "email" })
                                            </div>
                                            @Html.ValidationMessageFor(m => m.Email)
                                        </td>
                                    </tr>
                                }
                                <tr>
                                    <td>
                                        @Html.LabelFor(model => model.Password, new { @class = "control-label", @for = "Password" })
                                    </td>
                                    <td>
                                        <div class="input-prepend">
                                            <span class="add-on"><i class="icon-lock"></i></span>
                                            <input type="password"
                                                   class="password"
                                                   autocomplete="off"
                                                   id="@Html.FieldIdFor(m => m.Password)"
                                                   name="@Html.FieldNameFor(m => m.Password)"
                                                   value="@(Model.Password.HasValue() ? Model.Password : null)" />
                                        </div>
                                        @Html.ValidationMessageFor(m => m.Password)
                                    </td>
                                </tr>
                                <tr>
                                    <td></td>
                                    <td cellpadding="0">
                                        <label class="checkbox">
                                            @Html.CheckBoxFor(m => m.RememberMe)
                                            @T("Account.Login.Fields.RememberMe")
                                        </label>
                                    </td>
                                <tr>
                                <tr>
                                    <td></td>
                                    <td>
                                        @Html.RouteLink(T("Account.Login.ForgotPassword").Text, "PasswordRecovery")
                                    </td>
                                </tr>
                                <tr>
                                    <td></td>
                                    <td style="padding-bottom:0;">
                                        @if (Model.DisplayCaptcha)
                                        {
                                            <div class="captcha-box">
                                                @Html.Raw(Html.GenerateCaptcha())
                                            </div>
                                        }
                                        <button type="submit" class="btn button-face login-button">
                                            <i class="icon-signin"></i>@T("Account.Login.LoginButton")
                                        </button>
                                    </td>
                                </tr>
                            </table>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <div class="externalauthentication clearfix">
            @Html.Action("ExternalMethods", "ExternalAuthentication")
        </div>
    </div>
</div>
